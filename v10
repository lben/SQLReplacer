import re
import os
import datetime
import json

def get_identifiers(sql):
   # Remove comments
   sql = re.sub(r'--.*', '', sql)
   
   # Replace string literals with placeholders
   string_literal_regex = r"(?P<quote>['\"])(?:(?!\1).)*?\1"
   string_literals = re.findall(string_literal_regex, sql)
   for i, literal in enumerate(string_literals):
       sql = sql.replace(literal, f"<STRING_{i}>", 1)
   
   identifier_regex = r'(?:(?<=\s)|(?<=\()|(?<=\.)|(?<=,)|(?<=@)|(?<=\[)|(?<=])|(?=\s)|(?=$))(?!(?:ADD|ALL|ALTER|AND|ANY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|EXTERNAL|FETCH|FILE|FILLFACTOR|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITY_INSERT|IDENTITYCOL|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MERGE|NATIONAL|NATURAL|NOCHECK|NONCLUSTERED|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PERCENT|PIVOT|PLAN|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|RULE|SAVE|SCHEMA|SECURITYAUDIT|SELECT|SEMANTICKEYPHRASETABLE|SEMANTICSIMILARITYDETAILSTABLE|SEMANTICSIMILARITYTABLE|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|STATISTICS|SYSTEM_USER|TABLE|TABLESAMPLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TRY_CONVERT|TSEQUAL|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XMLCAST|XMLEXISTS|XMLNAMESPACES|XMLPARSE|XMLQUERY|XPATH|XSINIL)(?:\s|$))(?!BY\b)([a-zA-Z_][a-zA-Z0-9_]*(?:\s*\(.*?\))?)'
   identifiers = re.findall(identifier_regex, sql)
   
   return sql, string_literals, identifiers

def replace_identifiers(sql, string_literals, identifier_map):
   def replace(match):
       identifier = match.group()
       if identifier in identifier_map:
           return identifier_map[identifier]
       return identifier
   
   sql = re.sub(r'\b\w+\b', replace, sql)
   
   # Replace placeholders back with string literals
   for i, literal in enumerate(string_literals):
       sql = sql.replace(f"<STRING_{i}>", literal, 1)
   
   return sql

def save_query(sql, identifier_map, save_name=None):
   if save_name:
       filename = f"{save_name}.txt"
       json_filename = f"{save_name}_mappings.json"
   else:
       timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
       filename = f"query_{timestamp}.txt"
       json_filename = f"query_{timestamp}_mappings.json"
   
   with open(filename, 'w') as file:
       file.write(sql)
   
   with open(json_filename, 'w') as file:
       json.dump(identifier_map, file)
   
   print(f"Query saved as {filename}")
   print(f"Identifier mappings saved as {json_filename}")

def load_query():
   files = [f for f in os.listdir('.') if f.endswith('.txt')]
   
   if not files:
       print("No saved queries found.")
       return None, None
   
   print("Saved queries:")
   for i, file in enumerate(files, start=1):
       print(f"{i}. {file}")
   
   choice = int(input("Enter the number of the query you want to load: "))
   
   if 1 <= choice <= len(files):
       filename = files[choice - 1]
       json_filename = filename.replace('.txt', '_mappings.json')
       
       with open(filename, 'r') as file:
           sql = file.read()
       
       with open(json_filename, 'r') as file:
           identifier_map = json.load(file)
       
       return sql, identifier_map
   else:
       print("Invalid choice.")
       return None, None

def main():
   while True:
       print("\nMenu:")
       print("1. Enter a new SQL query")
       print("2. Load a saved SQL query")
       print("3. Quit")
       
       choice = input("Enter your choice (1-3): ")
       
       if choice == '1':
           identifier_map = {}
           inverse_map = {}
           
           while True:
               print("\nEnter your SQL query (ensure it ends with ;) or 'q' to quit:")
               sql = ""
               while True:
                   line = input().strip()
                   if line == 'q':
                       break
                   sql += line + "\n"
                   if sql.strip().endswith(';'):
                       break
               
               if line == 'q':
                   break
               
               sql, string_literals, identifiers = get_identifiers(sql)
               unique_identifiers = sorted(set(identifier for identifier in identifiers if identifier not in [literal for literal in string_literals]))
               
               print("\nIdentified non-standard SQL identifiers:")
               for identifier in unique_identifiers:
                   if identifier not in identifier_map:
                       print(f"{identifier}=")
               
               print("\nEnter mapped names for each identifier (leave blank to keep original):")
               for identifier in unique_identifiers:
                   if identifier not in identifier_map:
                       mapped_name = input(f"{identifier}=").strip()
                       if mapped_name:
                           identifier_map[identifier] = mapped_name
                           inverse_map[mapped_name] = identifier
               
               updated_sql = replace_identifiers(sql, string_literals, identifier_map)
               print("\nUpdated SQL query:")
               print(updated_sql)
               
               save_name = input("\nEnter a name for the saved query file (leave blank to use the date): ").strip()
               save_query(sql, identifier_map, save_name)
               
               while True:
                   print("\nDo you want to keep iterating? (y/n)")
                   iterate = input().strip().lower()
                   
                   if iterate == 'y':
                       print("\nEnter the modified SQL query (press Enter twice to finish):")
                       modified_sql = ""
                       while True:
                           line = input().strip()
                           if not line:
                               break
                           modified_sql += line + "\n"
                       
                       modified_sql, string_literals, _ = get_identifiers(modified_sql)
                       original_sql = replace_identifiers(modified_sql, string_literals, inverse_map)
                       print("\nOriginal SQL query with identifiers replaced:")
                       print(original_sql)
                   elif iterate == 'n':
                       break
                   else:
                       print("Invalid choice. Please enter 'y' or 'n'.")
       
       elif choice == '2':
           sql, identifier_map = load_query()
           if sql is not None:
               print("\nLoaded SQL query:")
               print(sql)
               print("\nLoaded identifier mappings:")
               print(identifier_map)
       
       elif choice == '3':
           print("Goodbye!")
           break
       
       else:
           print("Invalid choice. Please enter a number between 1 and 3.")

if __name__ == '__main__':
   main()

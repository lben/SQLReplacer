import unittest
import re
import json
import os
import uuid
from datetime import datetime

# Main script functions
RESERVED_WORDS = {
    'ADD', 'ALL', 'ALTER', 'AND', 'ANY', 'AS', 'ASC', 'BACKUP', 'BETWEEN', 'CASE', 'CHECK', 'COLUMN', 'CONSTRAINT', 'CREATE', 'DATABASE', 'DEFAULT', 'DELETE',
    'DESC', 'DISTINCT', 'DROP', 'EXEC', 'EXISTS', 'FOREIGN', 'FROM', 'FULL', 'GROUP', 'HAVING', 'IN', 'INDEX', 'INNER', 'INSERT', 'INTO', 'IS', 'JOIN', 'LEFT',
    'LIKE', 'LIMIT', 'NOT', 'NULL', 'OR', 'ORDER', 'OUTER', 'PRIMARY', 'PROCEDURE', 'RIGHT', 'ROWNUM', 'SELECT', 'SET', 'TABLE', 'TOP', 'TRUNCATE', 'UNION',
    'UNIQUE', 'UPDATE', 'VALUES', 'VIEW', 'WHERE', 'WITH', 'PARTITION', 'BY', 'GROUP BY', 'ORDER BY', 'PARTITION BY', 'ON',
    'AVG', 'COUNT', 'FIRST', 'LAST', 'MAX', 'MIN', 'SUM', 'UCASE', 'LCASE', 'MID', 'LEN', 'ROUND', 'NOW', 'FORMAT'
}

# Convert RESERVED_WORDS to lower case for case-insensitive matching
RESERVED_WORDS = {word.lower() for word in RESERVED_WORDS}

def save_mapping(mapping, filename=None):
    if filename is None:
        filename = datetime.now().strftime("mapping_%Y%m%d_%H%M%S.json")
    with open(filename, 'w') as f:
        json.dump(mapping, f, indent=4)
    return filename

def load_mapping(filename):
    with open(filename, 'r') as f:
        return json.load(f)

def generate_obfuscated_name():
    return 'obf_' + str(uuid.uuid4()).replace('-', '_')

def obfuscate_identifiers(sql_query):
    words = re.findall(r'\b[a-zA-Z_][a-zA-Z0-9_]*\b', sql_query)
    unique_identifiers = {word for word in words if word.lower() not in RESERVED_WORDS}

    mapping = {}
    for identifier in unique_identifiers:
        replacement = generate_obfuscated_name()
        mapping[identifier] = replacement

    return mapping

def replace_identifiers(sql_query, mapping, reverse=False):
    for identifier, replacement in sorted(mapping.items(), key=lambda item: len(item[0]), reverse=True):
        pattern = re.compile(re.escape(replacement if reverse else identifier), re.IGNORECASE)
        sql_query = pattern.sub(lambda match: replacement if not reverse else identifier, sql_query)
    return sql_query

# Unit test case
class TestSQLObfuscator(unittest.TestCase):
    def setUp(self):
        self.complex_sql = """
        WITH Sales_CTE (SalesPerson, SalesAmount) AS (
            SELECT SalesPerson, SUM(Sales) AS SalesAmount
            FROM SalesTable
            GROUP BY SalesPerson
        )
        SELECT SalesPerson, 
               SUM(SalesAmount) OVER (PARTITION BY Region ORDER BY SalesPerson) AS TotalSales
        FROM Sales_CTE
        WHERE SalesAmount > 1000
        HAVING SUM(SalesAmount) > 5000
        ORDER BY SalesPerson;
        """
        self.mapping_file = "test_mapping.json"
        self.mapping = obfuscate_identifiers(self.complex_sql)

    def tearDown(self):
        if os.path.isfile(self.mapping_file):
            os.remove(self.mapping_file)

    def test_obfuscate_identifiers(self):
        self.assertTrue(self.mapping)
        for original, replacement in self.mapping.items():
            self.assertIn(original, self.complex_sql)

    def test_replace_identifiers(self):
        obfuscated_sql = replace_identifiers(self.complex_sql, self.mapping)
        for original, replacement in self.mapping.items():
            self.assertIn(replacement, obfuscated_sql)
            self.assertNotIn(original, obfuscated_sql)

    def test_save_and_load_mapping(self):
        save_mapping(self.mapping, self.mapping_file)
        loaded_mapping = load_mapping(self.mapping_file)
        self.assertEqual(self.mapping, loaded_mapping)

    def test_revert_identifiers(self):
        obfuscated_sql = replace_identifiers(self.complex_sql, self.mapping)
        reverted_sql = replace_identifiers(obfuscated_sql, self.mapping, reverse=True)
        self.assertEqual(reverted_sql.strip(), self.complex_sql.strip())

if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)


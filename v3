import re
import os
import datetime

def get_identifiers(sql):
    # Remove comments
    sql = re.sub(r'--.*', '', sql)
    
    # Replace string literals with placeholders
    string_literals = re.findall(r"'(?:[^'\\]|\\.)*'", sql)
    for i, literal in enumerate(string_literals):
        sql = sql.replace(literal, f"<STRING_{i}>", 1)
    
    identifier_regex = r'(?:(?<=\s)|(?<=\()|(?<=\.)|(?<=,))(?!(?:SELECT|FROM|JOIN|ON|WHERE|GROUP|HAVING|ORDER|LIMIT|OFFSET|AS|NOT|AND|OR|IN|LIKE|BETWEEN|IS|NULL|TRUE|FALSE|CASE|WHEN|THEN|ELSE|END|ASC|DESC|DISTINCT|ALL|EXISTS|UNION|INTERSECT|EXCEPT)(?:\s|$))(?!BY\b)([a-zA-Z_][a-zA-Z0-9_]*(?:\s*\(.*?\))?)'
    identifiers = re.findall(identifier_regex, sql, re.IGNORECASE)
    
    # Replace placeholders back with string literals
    for i, literal in enumerate(string_literals):
        sql = sql.replace(f"<STRING_{i}>", literal, 1)
    
    return identifiers

def replace_identifiers(sql, identifier_map):
    for original, new in identifier_map.items():
        sql = re.sub(f'\\b{original}\\b', new, sql)
    return sql

def save_query(sql, identifier_map):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"query_{timestamp}.txt"
    
    with open(filename, 'w') as file:
        file.write(sql + '\n')
        file.write(str(identifier_map))
    
    print(f"Query saved as {filename}")

def load_query():
    files = [f for f in os.listdir('.') if f.startswith('query_') and f.endswith('.txt')]
    
    if not files:
        print("No saved queries found.")
        return None, None
    
    print("Saved queries:")
    for i, file in enumerate(files, start=1):
        print(f"{i}. {file}")
    
    choice = int(input("Enter the number of the query you want to load: "))
    
    if 1 <= choice <= len(files):
        filename = files[choice - 1]
        with open(filename, 'r') as file:
            sql = file.readline().strip()
            identifier_map = eval(file.readline())
        return sql, identifier_map
    else:
        print("Invalid choice.")
        return None, None

def main():
    while True:
        print("\nMenu:")
        print("1. Enter a new SQL query")
        print("2. Load a saved SQL query")
        print("3. Quit")
        
        choice = input("Enter your choice (1-3): ")
        
        if choice == '1':
            identifier_map = {}
            inverse_map = {}
            
            while True:
                print("\nEnter your SQL query (or 'q' to quit):")
                sql = ""
                while True:
                    line = input()
                    if line.strip() == 'q':
                        break
                    sql += line + "\n"
                    if sql.strip().endswith(';'):
                        break
                
                if line.strip() == 'q':
                    break
                
                identifiers = get_identifiers(sql)
                unique_identifiers = sorted(set(identifiers))
                
                print("\nIdentified non-standard SQL identifiers:")
                for identifier in unique_identifiers:
                    if identifier not in identifier_map:
                        print(f"{identifier}=")
                
                print("\nEnter mapped names for each identifier (leave blank to keep original):")
                for identifier in unique_identifiers:
                    if identifier not in identifier_map:
                        mapped_name = input(f"{identifier}=").strip()
                        if mapped_name:
                            identifier_map[identifier] = mapped_name
                            inverse_map[mapped_name] = identifier
                
                updated_sql = replace_identifiers(sql, identifier_map)
                print("\nUpdated SQL query:")
                print(updated_sql)
                
                save_query(sql, identifier_map)
                
                while True:
                    print("\nDo you want to keep iterating? (y/n)")
                    iterate = input().strip().lower()
                    
                    if iterate == 'y':
                        print("\nEnter the modified SQL query (press Enter twice to finish):")
                        modified_sql = ""
                        while True:
                            line = input()
                            if not line.strip():
                                break
                            modified_sql += line + "\n"
                        
                        original_sql = replace_identifiers(modified_sql, inverse_map)
                        print("\nOriginal SQL query with identifiers replaced:")
                        print(original_sql)
                    elif iterate == 'n':
                        break
                    else:
                        print("Invalid choice. Please enter 'y' or 'n'.")
        
        elif choice == '2':
            sql, identifier_map = load_query()
            if sql is not None:
                print("\nLoaded SQL query:")
                print(sql)
                print("\nLoaded identifier mappings:")
                print(identifier_map)
        
        elif choice == '3':
            print("Goodbye!")
            break
        
        else:
            print("Invalid choice. Please enter a number between 1 and 3.")

if __name__ == '__main__':
    main()
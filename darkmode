import re
from bs4 import BeautifulSoup
import colorsys

def hex_to_rgb(hex_color):
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return '#{:02x}{:02x}{:02x}'.format(int(rgb[0]), int(rgb[1]), int(rgb[2]))

def darken_color(hex_color):
    rgb = hex_to_rgb(hex_color)
    hsv = colorsys.rgb_to_hsv(rgb[0]/255.0, rgb[1]/255.0, rgb[2]/255.0)
    darkened_rgb = colorsys.hsv_to_rgb(hsv[0], hsv[1], max(hsv[2] - 0.5, 0))
    return rgb_to_hex((darkened_rgb[0]*255, darkened_rgb[1]*255, darkened_rgb[2]*255))

def lighten_color(hex_color):
    rgb = hex_to_rgb(hex_color)
    hsv = colorsys.rgb_to_hsv(rgb[0]/255.0, rgb[1]/255.0, rgb[2]/255.0)
    lightened_rgb = colorsys.hsv_to_rgb(hsv[0], hsv[1], min(hsv[2] + 0.5, 1))
    return rgb_to_hex((lightened_rgb[0]*255, lightened_rgb[1]*255, lightened_rgb[2]*255))

def generate_dark_mode_js(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Extract all unique colors from inline styles and style tags
    colors = set()
    for tag in soup.find_all(style=True):
        colors.update(re.findall(r'#[0-9a-fA-F]{6}', tag['style']))
    
    for style in soup.find_all('style'):
        colors.update(re.findall(r'#[0-9a-fA-F]{6}', style.string))
    
    # Generate color mappings
    color_map = {color: darken_color(color) if sum(hex_to_rgb(color)) > 382 else lighten_color(color) for color in colors}
    
    # Generate JavaScript
    js = """
    (function() {
        const styleElement = document.createElement('style');
        styleElement.type = 'text/css';
        styleElement.innerHTML = `
            body { background-color: #121212 !important; color: #e0e0e0 !important; }
    """
    
    for original, dark in color_map.items():
        js += f"* {{ color: {original} !important; color: {dark} !important; }}\n"
        js += f"* {{ background-color: {original} !important; background-color: {dark} !important; }}\n"
    
    js += """
        `;
        document.head.appendChild(styleElement);
        
        const invertImages = () => {
            document.querySelectorAll('img, video, canvas').forEach(el => {
                el.style.filter = 'invert(1) hue-rotate(180deg)';
            });
        };
        
        invertImages();
        
        // Handle dynamically loaded content
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    invertImages();
                }
            });
        });
        
        observer.observe(document.body, { childList: true, subtree: true });
    })();
    """
    
    return js

# Usage
html_content = input("Paste the HTML content here (press Ctrl+D or Cmd+D when finished):\n")
dark_mode_js = generate_dark_mode_js(html_content)
print("\nJavaScript to paste in the console:")
print(dark_mode_js)